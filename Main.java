import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Scanner;
import java.io.*;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/*
 * This project is a Java program that implements an inventory management system.
 * Three classes were made in order to complete the program - Main, UserManagement, and InventoryManagement.
 * Once a user signs into the program, there will be a list of options that they can choose from. 
 * From there, they are able to manipulate the inventory management system. 
 * Each choice that they chose, it will bring up another option menu. 
 * Each time after an option is chosen, the system keeps track of it in a user log report that can be generated by the user. 
 */
public class Main {
	//Variables that are used in the program.
	public static String currentUser="";
	public static ArrayList<ArrayList<String>> activities=new ArrayList<ArrayList<String>>();
	public static ArrayList<String> day=new ArrayList<String>();
		
	//This method writes to a file.
	public static void ReportWrite(ArrayList<ArrayList<String>> activities) throws IOException{
		BufferedWriter buff=new BufferedWriter(new FileWriter("/Users/RossMonroe/Documents/Reportfile.txt"));
	 	
	 	//for loop that writes the text to the file in the specific format
        for(int i=0; i<activities.size(); i++){
        	for(int j=0; j<activities.get(i).size(); j++){
        		buff.write(activities.get(i).get(j) + "\t");
        	}
            buff.newLine();
        }
	     //Sending final output
	     buff.flush();
	}
	
	//This method reads from the report file.
	public static ArrayList<ArrayList<String>> ReportRead() throws FileNotFoundException{
		ArrayList<ArrayList<String>> days=new ArrayList<ArrayList<String>>();
		
		//Scanner that reads the data from the specified file
		Scanner reportFileScan=new Scanner(new File("/Users/RossMonroe/Documents/Reportfile.txt"));
		String[] information;
		int i=0;
		while(reportFileScan.hasNextLine()){
			information=reportFileScan.nextLine().split("\t");
			ArrayList<String> activity=new ArrayList<String>();
				for(int j=0; j<information.length; j++){
					activity.add(information[j]);
				}
			days.add(activity);
			i++;
		}
		return days;
	}
	
	//This method prints when the method is called.
	public static void Print(ArrayList<String> day){
		StringBuffer buff=new StringBuffer();
		for(int j=0; j<day.size(); j++){
		    buff.append(day.get(j)).append(", ");
		}
		System.out.println(buff.substring(0, buff.length()-2));
	}
	
	//This method reads the users in the file 
	public static ArrayList<ArrayList<String>> UserRead() throws FileNotFoundException{
		ArrayList<ArrayList<String>> users=new ArrayList<ArrayList<String>>();
		
		//Scanner that reads the data from the specified file
		Scanner userFileScan=new Scanner(new File("/Users/RossMonroe/Documents/Userfile.txt"));
		String[] credentials;
		int i=0;
		while(userFileScan.hasNextLine()){
			credentials=userFileScan.nextLine().split(" ");
			ArrayList<String> aUser=new ArrayList<String>();
				for(int j=0; j<credentials.length; j++){
					aUser.add(credentials[j]);
				}
			users.add(aUser);
			i++;
		}
		return users;
	}
	
	//This method is used to encrypt the passwords for each user. 
	public static String Encryption(String aPw) throws NoSuchAlgorithmException{
		String md5 = null;

		//Create MessageDigest object for MD5
		MessageDigest digest = MessageDigest.getInstance("MD5");
		
		//Update input string in message digest
		digest.update(aPw.getBytes(), 0, aPw.length());

		//Converts message digest value in base 16 (hex) 
		md5 = new BigInteger(1, digest.digest()).toString(16);

		return md5;
	}
	
	//Method is used to track the activity from each user. 
	public static ArrayList<String> TrackActivity(String activity){
		day.add(activity);
		return day;
	}
	
	//This method displays the report for the user and asks the date they would like to have the report on. 
	public static  void GenerateReport(ArrayList<ArrayList<String>> activity) throws FileNotFoundException{
		System.out.println("Please enter a date you would like to generate a report of in YYYY.MM.DD format.");
		Scanner scan=new Scanner(System.in);
		String date=scan.next();
		boolean found=false;
		System.out.println(activity.get(0));
		for(int i=0; i<activity.size(); i++){
			if(date.equals(activity.get(i).get(1))){
				//System.out.println(activity.get(i));
				Print(activity.get(i));
				found=true;
			}
		}
		
		//Displays error message if there are no activities on that date. 
		if(!found){
			System.out.println("Report not available: no activities done on " + date);
		}
		String report="Generated Report for " + date;
		TrackActivity(report);
	}
	
	//This method authenticated the credentials inputed by the user to log onto the system. 
	public static ArrayList<ArrayList<String>> Authentication() throws IOException, NoSuchAlgorithmException {
		Date date=new Date();
		SimpleDateFormat format = new SimpleDateFormat("yyyy.MM.dd");
		String today = format.format(date);
		int randomNum = (int)(Math.random() * 99999 + 10000);
    	String RID=Integer.toString(randomNum);
    	day.add(RID);
		day.add(today);
		ArrayList<ArrayList<String>> users=UserRead();
		Scanner scan=new Scanner (System.in);
		System.out.println("Enter Employee ID:");
		String EID=scan.nextLine();
		currentUser=EID;
		day.add(currentUser);
		System.out.println("Enter password:");
		String password=scan.nextLine();
		//this is a loop to keep getting credentials and encryption.
		for(int l=0; l<users.size(); l++){
			if(users.get(l).get(0).equals(EID) && users.get(l).get(2).equals(Encryption(password))){
				SelectActivity(users);
			}
		}
		return users;
	}
	
	//This method displays the choices for the user after they have logged in. 
	public static ArrayList<ArrayList<String>> SelectActivity(ArrayList<ArrayList<String>> users) throws IOException, NoSuchAlgorithmException {
		activities=ReportRead();
		int exitnum=0;
		loop: while(exitnum!=4){
			System.out.println("Please enter one of the following numbers to execute it's prompt:");
			System.out.println("1. User Management");
			System.out.println("2. Inventory Management");
			System.out.println("3. Generate Report");
			System.out.println("4. Logout");
			Scanner menuanswer= new Scanner (System.in);
			int mAnswer=menuanswer.nextInt();
			switch(mAnswer){
				//Case 1 will display the user management choices
				case(1):
					UserManagement.UserManagementChoices(users);
		        	break;
		        
		        //case 2 will display the inventory management choices
		        case(2):
		        	InventoryManagement.InventoryManagementChoices();
		        	break;
		        	
		        //Case 3 will display the generated report for the user log
		        case(3):
		        	GenerateReport(activities);
		        	break;
		        	
		        //case 4 will log out of the system after it updates all of the logs for reports.
		        case(4):
		        	activities.add(day);
		        	ReportWrite(activities);
		        	System.out.println("Thank you for using the InventoryManager!");
		        	break loop;
		        	
		        default:System.out.println("Invalid number. Please try again.");
			}
		}
		return users;
	}
	
	//main method that executes all other functions/methods.
	public static void main(String[] args) throws IOException, NoSuchAlgorithmException  {
		Main anObject=new Main();
		anObject.Authentication();
	}
}